"""
Application principale OptimusCredit - Analyse Financi√®re BCEAO
Version 2.1 compl√®te avec gestionnaire d'√©tat centralis√© - CORRIG√âE
"""

import streamlit as st
import sys
import os
import time
from datetime import datetime

# Configuration de la page DOIT √™tre la premi√®re commande Streamlit
st.set_page_config(
    page_title="OptimusCredit - Analyse Financi√®re BCEAO",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ajouter le r√©pertoire modules au path Python
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

# Import du gestionnaire de session centralis√©
try:
    from session_manager import SessionManager, init_session, has_analysis, reset_app
except ImportError as e:
    st.error(f"‚ùå Impossible d'importer session_manager.py: {e}")
    st.error("Assurez-vous que session_manager.py est pr√©sent dans le r√©pertoire racine.")
    st.stop()

def main():
    """Fonction principale de l'application"""
    
    # √âTAPE 1: Initialiser le gestionnaire de session
    init_session()
    
    # Afficher l'en-t√™te principal
    display_main_header()
    
    # √âTAPE 2: Gestion de la navigation dans la sidebar
    display_sidebar_navigation()
    
    # √âTAPE 3: Affichage du contenu principal selon la page s√©lectionn√©e
    display_main_content()
    
    # √âTAPE 4: Afficher le pied de page
    display_footer()

def display_main_header():
    """Affiche l'en-t√™te principal de l'application"""
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div style="text-align: center; padding: 20px;">
            <h1 style="color: #1f4e79; margin-bottom: 10px;">üìä OptimusCredit</h1>
            <h3 style="color: #2e7d32; margin-top: 0;">Outil d'Analyse Financi√®re BCEAO</h3>
            <p style="color: #666; margin-top: 10px;">Conforme aux normes prudentielles BCEAO 2024 ‚Ä¢ Version 2.1</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")

def display_sidebar_navigation():
    """Affiche la navigation compl√®te dans la sidebar - VERSION CORRIG√âE"""
    
    with st.sidebar:
        st.markdown("## üß≠ Navigation")
        
        # V√©rifier l'√©tat de l'analyse via le gestionnaire centralis√©
        analysis_available = has_analysis()
        
        # Informations sur l'analyse actuelle
        if analysis_available:
            display_analysis_status_sidebar()
        else:
            st.info("‚ÑπÔ∏è Aucune analyse en cours")
        
        st.markdown("---")
        
        # Menu de navigation principal
        display_navigation_menu(analysis_available)
        
        st.markdown("---")
        
        # Actions rapides
        display_quick_actions(analysis_available)
        
        st.markdown("---")
        
        # Normes BCEAO
        display_bceao_norms_sidebar()
        
        st.markdown("---")
        
        # CORRECTION: Section debug supprim√©e en production
        # display_debug_section()  # COMMENT√â

def display_analysis_status_sidebar():
    """Affiche le statut de l'analyse dans la sidebar"""
    
    try:
        score, metadata = SessionManager.get_analysis_info()
        classe = SessionManager.get_financial_class(score)
        interpretation, color = SessionManager.get_interpretation(score)
        
        st.markdown(f"""
        <div style="text-align: center; padding: 15px; border-radius: 10px; background-color: {color}20; border: 2px solid {color};">
            <h4 style="color: {color}; margin: 0;">‚úÖ Analyse Disponible</h4>
            <h2 style="color: {color}; margin: 10px 0;">{score}/100</h2>
            <p style="color: {color}; margin: 0; font-weight: bold;">Classe {classe}</p>
            <p style="color: {color}; margin: 5px 0; font-size: 12px;">{interpretation}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Afficher des m√©tadonn√©es suppl√©mentaires
        if metadata:
            secteur = metadata.get('secteur', 'N/A').replace('_', ' ').title()
            source = metadata.get('source', 'N/A')
            date_analyse = metadata.get('date_analyse', 'N/A')
            
            st.markdown(f"""
            **üìÅ Source:** {source}  
            **üè≠ Secteur:** {secteur}  
            **üìÖ Analys√©:** {date_analyse}  
            **üî¢ Ratios:** {metadata.get('ratios_count', 0)}
            """)
    
    except Exception as e:
        st.error(f"Erreur affichage statut: {e}")

def display_navigation_menu(analysis_available):
    """Affiche le menu de navigation principal"""
    
    # D√©finition des pages avec leurs propri√©t√©s
    pages = {
        'home': {
            'label': 'üè† Accueil',
            'description': 'Page d\'accueil et pr√©sentation',
            'requires_analysis': False,
            'type': 'primary'
        },
        'excel_import': {
            'label': 'üì§ Import Excel',
            'description': 'Importer un fichier Excel BCEAO',
            'requires_analysis': False,
            'type': 'secondary'
        },
        'manual_input': {
            'label': '‚úèÔ∏è Saisie Manuelle',
            'description': 'Saisie manuelle des donn√©es',
            'requires_analysis': False,
            'type': 'secondary'
        },
        'analysis': {
            'label': 'üìä Analyse Compl√®te',
            'description': 'Analyse d√©taill√©e et ratios',
            'requires_analysis': True,
            'type': 'primary'
        },
        'reports': {
            'label': 'üìã Rapports',
            'description': 'G√©n√©ration de rapports',
            'requires_analysis': True,
            'type': 'secondary'
        }
    }
    
    current_page = SessionManager.get_current_page()
    reset_counter = SessionManager.get_reset_counter()
    
    for page_key, page_info in pages.items():
        # D√©terminer si le bouton doit √™tre d√©sactiv√©
        disabled = page_info['requires_analysis'] and not analysis_available
        
        # D√©terminer le type de bouton
        if current_page == page_key:
            button_type = "primary"
        elif disabled:
            button_type = "secondary"
        else:
            button_type = page_info['type']
        
        # Cr√©er une cl√© unique pour √©viter les conflits
        button_key = f"nav_btn_{page_key}_{reset_counter}"
        
        # Afficher le bouton
        if st.button(
            page_info['label'], 
            key=button_key, 
            type=button_type, 
            use_container_width=True,
            disabled=disabled,
            help=page_info['description']
        ):
            if not disabled:
                SessionManager.set_current_page(page_key)
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è Cette fonction n√©cessite une analyse. Importez d'abord des donn√©es.")

def display_quick_actions(analysis_available):
    """Affiche les actions rapides dans la sidebar"""
    
    st.markdown("### ‚ö° Actions Rapides")
    
    reset_counter = SessionManager.get_reset_counter()
    
    if analysis_available:
        # Actions disponibles avec analyse
        col1, col2 = st.columns(2)
        
        with col1:
            view_key = f"sidebar_view_{reset_counter}"
            if st.button("üëÅÔ∏è Voir", key=view_key, use_container_width=True):
                SessionManager.set_current_page('analysis')
                st.rerun()
        
        with col2:
            report_key = f"sidebar_report_{reset_counter}"
            if st.button("üìÑ Rapport", key=report_key, use_container_width=True):
                SessionManager.set_current_page('reports')
                st.rerun()
        
        # Bouton de r√©initialisation
        reset_key = f"sidebar_reset_{reset_counter}"
        if st.button("üîÑ Nouvelle Analyse", key=reset_key, type="secondary", use_container_width=True):
            if st.confirm("Voulez-vous vraiment effacer l'analyse actuelle ?"):
                reset_app()
                st.success("üîÑ Application r√©initialis√©e!")
                st.rerun()
    
    else:
        # Actions disponibles sans analyse
        import_key = f"sidebar_import_{reset_counter}"
        if st.button("üì§ Import Excel", key=import_key, type="primary", use_container_width=True):
            SessionManager.set_current_page('excel_import')
            st.rerun()
        
        manual_key = f"sidebar_manual_{reset_counter}"
        if st.button("‚úèÔ∏è Saisie Manuelle", key=manual_key, use_container_width=True):
            SessionManager.set_current_page('manual_input')
            st.rerun()

def display_bceao_norms_sidebar():
    """Affiche les normes BCEAO dans la sidebar"""
    
    st.markdown("### üìã Normes BCEAO")
    
    with st.expander("üèõÔ∏è Ratios de Solvabilit√©"):
        st.markdown("""
        **Fonds propres de base (CET1):**
        ‚Ä¢ Minimum : 5%
        ‚Ä¢ Objectif √† terme : 7%
        
        **Fonds propres Tier 1:**
        ‚Ä¢ Minimum : 6,625%
        ‚Ä¢ Objectif √† terme : 8,5%
        
        **Solvabilit√© globale:**
        ‚Ä¢ Minimum : 8,625%
        ‚Ä¢ Objectif √† terme : 11,5%
        """)
    
    with st.expander("üíß Ratios de Liquidit√©"):
        st.markdown("""
        **Liquidit√© court terme :** ‚â• 75%
        **Couverture emplois MLT :** ‚â• 100%
        **Transformation :** ‚â§ 100%
        
        *Contr√¥les mensuels via FODEP*
        """)
    
    with st.expander("‚öñÔ∏è Division des Risques"):
        st.markdown("""
        **Division risques :** ‚â§ 65% des FP
        **Grands risques :** ‚â§ 8 fois les FP
        **Engagements apparent√©s :** ‚â§ 20%
        
        *Limite concentration d√©biteurs*
        """)
    
    with st.expander("üìà Qualit√© Portefeuille"):
        st.markdown("""
        **Cr√©ances douteuses :** Surveillance
        **Taux provisionnement :** Variable
        **Cr√©ances > 5 ans :** Passage en perte
        
        *Classification risques obligatoire*
        """)

def display_main_content():
    """CORRIG√â : Affiche le contenu principal selon la page s√©lectionn√©e"""
    
    current_page = SessionManager.get_current_page()
    
    try:
        if current_page == 'home' or current_page is None:
            show_home_page()
        
        elif current_page == 'excel_import':
            try:
                from modules.pages.excel_import import show_excel_import_page  # CORRECTION: chemin modules.pages
                show_excel_import_page()
            except ImportError as e:
                st.error(f"‚ùå Impossible de charger la page Import Excel: {e}")
                show_import_error_page("Import Excel")
        
        elif current_page == 'manual_input':
            try:
                from modules.pages.manual_input import show_manual_input_page  # CORRECTION: chemin modules.pages
                show_manual_input_page()
            except ImportError as e:
                st.error(f"‚ùå Impossible de charger la page Saisie Manuelle: {e}")
                show_import_error_page("Saisie Manuelle")
        
        elif current_page == 'analysis':
            if has_analysis():
                try:
                    from modules.pages.analysis import show_analysis_page  # CORRECTION: chemin modules.pages
                    show_analysis_page()
                except ImportError as e:
                    st.error(f"‚ùå Impossible de charger la page Analyse: {e}")
                    show_import_error_page("Analyse")
            else:
                show_no_analysis_page("analyse")
        
        elif current_page == 'reports':
            if has_analysis():
                try:
                    from modules.pages.reports import show_reports_page  # CORRECTION: chemin modules.pages
                    show_reports_page()
                except ImportError as e:
                    st.error(f"‚ùå Page Rapports non disponible: {e}")
                    show_import_error_page("Rapports")
            else:
                show_no_analysis_page("rapports")
        
        else:
            st.error(f"‚ùå Page '{current_page}' non reconnue")
            show_unknown_page_error(current_page)
    
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement de la page '{current_page}': {e}")
        
        # CORRECTION: Gestion d'erreur simplifi√©e
        st.error("Retour automatique √† l'accueil...")
        SessionManager.set_current_page('home')
        time.sleep(1)  # CORRECTION: Attendre 1 seconde
        st.rerun()

def show_home_page():
    """Affiche la page d'accueil compl√®te"""
    
    st.markdown("""
    ## üè† Bienvenue dans OptimusCredit
    
    ### L'outil d'analyse financi√®re conforme aux normes BCEAO
    
    Analysez la sant√© financi√®re de votre entreprise avec pr√©cision et obtenez des recommandations personnalis√©es.
    """)
    
    # Fonctionnalit√©s principales
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### üéØ Fonctionnalit√©s Principales
        
        - **üì§ Import Excel** : Compatible format BCEAO
        - **‚úèÔ∏è Saisie Manuelle** : Interface intuitive
        - **üìä Analyse Automatique** : 25+ ratios calcul√©s
        - **üéØ Scoring BCEAO** : Notation sur 100 points
        - **üìà Graphiques Interactifs** : Visualisations dynamiques
        - **üìã Rapports Professionnels** : Export PDF
        - **üîç Comparaison Sectorielle** : Benchmarks par industrie
        - **üí° Recommandations** : Plan d'action personnalis√©
        """)
    
    with col2:
        st.markdown("""
        ### üìä Cat√©gories d'Analyse
        
        - **üíß Liquidit√© (40 pts)** : Capacit√© de paiement CT
        - **üèõÔ∏è Solvabilit√© (40 pts)** : Structure financi√®re
        - **üìà Rentabilit√© (30 pts)** : Performance √©conomique
        - **‚ö° Activit√© (15 pts)** : Efficacit√© op√©rationnelle
        - **üîß Gestion (15 pts)** : Qualit√© de management
        
        **Total : 140 pts ‚Üí ramen√© √† 100**
        """)
    
    # Actions rapides
    st.markdown("### üöÄ Commencer votre Analyse")
    
    col1, col2, col3 = st.columns(3)
    
    reset_counter = SessionManager.get_reset_counter()
    
    with col1:
        home_import_key = f"home_import_{reset_counter}"
        if st.button("üì§ Importer un fichier Excel", key=home_import_key, type="primary", use_container_width=True):
            SessionManager.set_current_page('excel_import')
            st.rerun()
        st.caption("Format BCEAO standard")
    
    with col2:
        home_manual_key = f"home_manual_{reset_counter}"
        if st.button("‚úèÔ∏è Saisie manuelle", key=home_manual_key, type="secondary", use_container_width=True):
            SessionManager.set_current_page('manual_input')
            st.rerun()
        st.caption("Interface guid√©e")
    
    with col3:
        if has_analysis():
            home_analysis_key = f"home_analysis_{reset_counter}"
            if st.button("üìä Voir l'analyse actuelle", key=home_analysis_key, type="primary", use_container_width=True):
                SessionManager.set_current_page('analysis')
                st.rerun()
            st.caption("Analyse disponible")
        else:
            home_analysis_disabled_key = f"home_analysis_disabled_{reset_counter}"
            st.button("üìä Analyse", key=home_analysis_disabled_key, use_container_width=True, disabled=True)
            st.caption("Importez d'abord des donn√©es")
    
    # Afficher le r√©sum√© de l'analyse si disponible
    if has_analysis():
        display_analysis_summary()
    
    # Sections informatives
    display_info_sections()

def display_analysis_summary():
    """Affiche un r√©sum√© de l'analyse disponible"""
    
    st.markdown("---")
    st.markdown("### üìä Analyse Disponible")
    
    try:
        score, metadata = SessionManager.get_analysis_info()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Score Global", f"{score}/100")
        
        with col2:
            classe = SessionManager.get_financial_class(score)
            st.metric("Classe BCEAO", classe)
        
        with col3:
            ratios_count = metadata.get('ratios_count', 0)
            st.metric("Ratios Calcul√©s", ratios_count)
        
        with col4:
            secteur = metadata.get('secteur', 'Non sp√©cifi√©')
            st.metric("Secteur", secteur.replace('_', ' ').title())
        
        # Actions pour l'analyse disponible
        st.markdown("#### Actions Disponibles")
        col1, col2, col3 = st.columns(3)
        
        reset_counter = SessionManager.get_reset_counter()
        
        with col1:
            home_view_key = f"home_view_{reset_counter}"
            if st.button("üìä Consulter l'Analyse", key=home_view_key, type="primary", use_container_width=True):
                SessionManager.set_current_page('analysis')
                st.rerun()
        
        with col2:
            home_report_key = f"home_report_{reset_counter}"
            if st.button("üìã G√©n√©rer un Rapport", key=home_report_key, type="secondary", use_container_width=True):
                SessionManager.set_current_page('reports')
                st.rerun()
        
        with col3:
            home_reset_key = f"home_reset_{reset_counter}"
            if st.button("üîÑ Nouvelle Analyse", key=home_reset_key, type="secondary", use_container_width=True):
                if st.confirm("Effacer l'analyse actuelle ?"):
                    reset_app()
                    st.success("üîÑ Application r√©initialis√©e!")
                    st.rerun()
    
    except Exception as e:
        st.error(f"Erreur affichage r√©sum√©: {e}")

def display_info_sections():
    """Affiche les sections informatives de la page d'accueil"""
    
    st.markdown("---")
    
    # Section des nouveaut√©s
    with st.expander("üÜï Nouveaut√©s Version 2.1", expanded=False):
        st.markdown("""
        ### üöÄ Am√©liorations Majeures
        
        - **üîí Persistance Totale** : Vos fichiers ne se perdent plus lors de la navigation
        - **‚ö° Navigation Fluide** : Passez entre les pages sans probl√®me
        - **üéØ Reset Contr√¥l√©** : Seul "Nouvelle Analyse" remet √† z√©ro
        - **üìä Graphiques Enrichis** : Visualisations plus interactives
        - **üîß Session Manager** : Gestion d'√©tat centralis√©e et robuste
        - **üêõ Corrections** : R√©solution des bugs de r√©initialisation
        - **üì± Interface Am√©lior√©e** : Design plus moderne et responsive
        
        ### üîß Am√©liorations Techniques
        
        - **Anti-r√©initialisation** : Protection contre la perte de donn√©es
        - **Gestionnaire d'√©tat** : SessionManager centralis√©
        - **Cl√©s uniques** : √âvite les conflits de widgets Streamlit
        - **Gestion d'erreurs** : Messages plus informatifs
        - **Performance** : Chargement plus rapide des pages
        """)
    
    # Section normes BCEAO
    with st.expander("üìã Normes BCEAO 2024", expanded=False):
        st.markdown("""
        ### üèõÔ∏è Conformit√© R√©glementaire
        
        Cette application respecte int√©gralement les normes prudentielles BCEAO :
        
        **üìä Ratios de Liquidit√© :**
        - Liquidit√© g√©n√©rale ‚â• 1,5
        - Liquidit√© imm√©diate ‚â• 1,0
        - BFR en jours de CA ‚â§ 90 jours
        
        **üè¶ Ratios de Solvabilit√© :**
        - Autonomie financi√®re ‚â• 30%
        - Endettement global ‚â§ 65%
        - Capacit√© de remboursement ‚â§ 5 ans
        
        **üí∞ Ratios de Rentabilit√© :**
        - ROE ‚â• 10%
        - ROA ‚â• 2%
        - Marge nette ‚â• 5%
        
        **‚ö° Ratios d'Activit√© :**
        - Rotation de l'actif ‚â• 1,5
        - Rotation des stocks ‚â• 6
        - D√©lai de recouvrement ‚â§ 45 jours
        
        **üéØ Classes de Notation :**
        - **A+** (85-100) : Excellence financi√®re
        - **A** (70-84) : Tr√®s bonne situation
        - **B** (55-69) : Bonne situation
        - **C** (40-54) : Situation moyenne
        - **D** (25-39) : Situation faible
        - **E** (0-24) : Situation critique
        """)
    
    # Guide d'utilisation
    with st.expander("üìñ Guide d'Utilisation Rapide", expanded=False):
        st.markdown("""
        ### üéØ Comment utiliser OptimusCredit ?
        
        **1. üì§ Pr√©parez vos donn√©es**
        - Fichier Excel au format BCEAO standard
        - Ou saisie manuelle via l'interface
        
        **2. üîç Lancez l'analyse**
        - Import automatique depuis Excel
        - Calcul instantan√© de 25+ ratios
        - Scoring automatique sur 100 points
        
        **3. üìä Consultez les r√©sultats**
        - Tableau de bord interactif
        - Graphiques de performance
        - Comparaison sectorielle
        
        **4. üìã G√©n√©rez vos rapports**
        - Synth√®se ex√©cutive
        - Rapport d√©taill√©
        - Plan d'action personnalis√©
        
        ### üí° Conseils d'utilisation
        
        - **Donn√©es compl√®tes** : Plus vos donn√©es sont pr√©cises, plus l'analyse sera pertinente
        - **Secteur adapt√©** : Choisissez le bon secteur pour une comparaison pertinente
        - **Suivi r√©gulier** : R√©alisez l'analyse trimestriellement
        - **Actions correctives** : Suivez les recommandations prioritaires
        """)
    
    # Informations techniques
    with st.expander("üîß Sp√©cifications Techniques", expanded=False):
        st.markdown("""
        ### üìã Compatibilit√© et Pr√©requis
        
        **Formats support√©s :**
        - Excel : .xlsx, .xls
        - Taille maximale : 200 MB
        - Encodage : UTF-8, Windows-1252
        
        **Navigateurs compatibles :**
        - Chrome 90+ (recommand√©)
        - Firefox 88+
        - Safari 14+
        - Edge 90+
        
        **S√©curit√© et Confidentialit√© :**
        - ‚úÖ Traitement 100% local
        - ‚úÖ Aucune donn√©e envoy√©e sur internet
        - ‚úÖ Session temporaire uniquement
        - ‚úÖ Conforme RGPD
        
        **Performance :**
        - Analyse en 5-10 secondes
        - 25+ ratios calcul√©s automatiquement
        - Graphiques temps r√©el
        - Export instantan√©
        
        ### üìû Support Technique
        
        - **Email :** contact@kaizen-corporation.com
        - **Documentation :** Guide utilisateur int√©gr√©
        - **Horaires :** 9h-18h (GMT+0)
        - **Langue :** Fran√ßais, Anglais
        """)

def show_no_analysis_page(page_type="analyse"):
    """Affiche une page d'erreur quand aucune analyse n'est disponible"""
    
    st.warning(f"‚ö†Ô∏è Aucune analyse disponible pour acc√©der aux {page_type}")
    st.info("üí° Veuillez d'abord importer des donn√©es Excel ou effectuer une saisie manuelle.")
    
    st.markdown("### üöÄ Actions Disponibles")
    
    col1, col2 = st.columns(2)
    
    reset_counter = SessionManager.get_reset_counter()
    
    with col1:
        goto_import_key = f"goto_import_{page_type}_{reset_counter}"
        if st.button("üì§ Import Excel", key=goto_import_key, type="primary", use_container_width=True):
            SessionManager.set_current_page('excel_import')
            st.rerun()
        st.caption("Importer un fichier Excel au format BCEAO")
    
    with col2:
        goto_manual_key = f"goto_manual_{page_type}_{reset_counter}"
        if st.button("‚úèÔ∏è Saisie Manuelle", key=goto_manual_key, type="secondary", use_container_width=True):
            SessionManager.set_current_page('manual_input')
            st.rerun()
        st.caption("Saisir les donn√©es manuellement")

def show_import_error_page(page_name):
    """Affiche une page d'erreur pour les imports rat√©s"""
    
    st.error(f"‚ùå Impossible de charger la page {page_name}")
    
    st.markdown(f"""
    ### üîß Probl√®me technique d√©tect√©
    
    La page **{page_name}** n'a pas pu √™tre charg√©e. Cela peut √™tre d√ª √† :
    
    - üìÅ Fichier manquant : `modules/pages/{page_name.lower().replace(' ', '_')}.py`
    - üêç Erreur d'import Python
    - üîß Module d√©pendant manquant
    
    ### üí° Solutions propos√©es
    """)
    
    col1, col2 = st.columns(2)
    
    reset_counter = SessionManager.get_reset_counter()
    
    with col1:
        home_key = f"error_home_{reset_counter}"
        if st.button("üè† Retour √† l'Accueil", key=home_key, type="primary", use_container_width=True):
            SessionManager.set_current_page('home')
            st.rerun()
    
    with col2:
        reload_key = f"error_reload_{reset_counter}"
        if st.button("üîÑ Recharger", key=reload_key, use_container_width=True):
            st.rerun()

def show_unknown_page_error(page_name):
    """Affiche une erreur pour une page inconnue"""
    
    st.error(f"‚ùå Page '{page_name}' non reconnue")
    
    st.markdown(f"""
    ### üîç Page inconnue d√©tect√©e
    
    La page **{page_name}** n'existe pas dans l'application.
    
    ### üìã Pages disponibles :
    - üè† **Accueil** : Page d'accueil et pr√©sentation
    - üì§ **Import Excel** : Importer un fichier Excel BCEAO
    - ‚úèÔ∏è **Saisie Manuelle** : Saisie manuelle des donn√©es
    - üìä **Analyse Compl√®te** : Analyse d√©taill√©e et ratios (n√©cessite des donn√©es)
    - üìã **Rapports** : G√©n√©ration de rapports (n√©cessite des donn√©es)
    """)
    
    reset_counter = SessionManager.get_reset_counter()
    
    col1, col2 = st.columns(2)
    
    with col1:
        unknown_home_key = f"unknown_home_{reset_counter}"
        if st.button("üè† Aller √† l'Accueil", key=unknown_home_key, type="primary", use_container_width=True):
            SessionManager.set_current_page('home')
            st.rerun()
    
    with col2:
        unknown_import_key = f"unknown_import_{reset_counter}"
        if st.button("üì§ Commencer une Analyse", key=unknown_import_key, type="secondary", use_container_width=True):
            SessionManager.set_current_page('excel_import')
            st.rerun()

def display_footer():
    """Affiche le pied de page de l'application"""
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown(f"""
        <div style="text-align: center; color: #666; font-size: 12px; padding: 20px;">
            <p><strong>¬© 2024 OptimusCredit - Analyse Financi√®re BCEAO</strong></p>
            <p>Version 2.1 ‚Ä¢ Conforme aux normes prudentielles BCEAO 2024</p>
            <p>D√©velopp√© par Kaizen Corporation ‚Ä¢ Support: contact@kaizen-corporation.com</p>
            <p><em>Derni√®re mise √† jour: {datetime.now().strftime('%d/%m/%Y')}</em></p>
        </div>
        """, unsafe_allow_html=True)

def handle_application_error(error, context=""):
    """G√®re les erreurs globales de l'application"""
    
    st.error(f"‚ùå Erreur Application {context}: {error}")
    
    with st.expander("üîç D√©tails Techniques", expanded=False):
        import traceback
        st.code(traceback.format_exc())
    
    st.markdown("### üîß Actions de R√©cup√©ration")
    
    col1, col2, col3 = st.columns(3)
    
    reset_counter = SessionManager.get_reset_counter()
    
    with col1:
        if st.button("üè† Accueil", key=f"error_home_recovery_{reset_counter}"):
            SessionManager.set_current_page('home')
            st.rerun()
    
    with col2:
        if st.button("üîÑ Recharger", key=f"error_reload_recovery_{reset_counter}"):
            st.rerun()
    
    with col3:
        if st.button("üßπ Reset Complet", key=f"error_reset_recovery_{reset_counter}"):
            if st.confirm("Effacer toutes les donn√©es et red√©marrer ?"):
                reset_app()
                st.success("Application r√©initialis√©e")
                st.rerun()

def check_system_requirements():
    """V√©rifie les pr√©requis syst√®me"""
    
    requirements_ok = True
    missing_modules = []
    
    # V√©rifier les modules essentiels
    essential_modules = [
        ('pandas', 'Manipulation des donn√©es'),
        ('plotly', 'Graphiques interactifs'),
        ('openpyxl', 'Lecture fichiers Excel'),
        ('datetime', 'Gestion des dates')
    ]
    
    for module_name, description in essential_modules:
        try:
            __import__(module_name)
        except ImportError:
            requirements_ok = False
            missing_modules.append((module_name, description))
    
    if not requirements_ok:
        st.error("‚ùå Modules Python manquants d√©tect√©s")
        
        st.markdown("### üì¶ Modules √† installer :")
        for module, desc in missing_modules:
            st.write(f"‚Ä¢ **{module}** : {desc}")
        
        st.code(f"pip install {' '.join([m[0] for m in missing_modules])}")
        
        st.stop()
    
    return True

def initialize_application():
    """Initialise l'application avec toutes les v√©rifications"""
    
    # V√©rifier les pr√©requis syst√®me
    check_system_requirements()
    
    # Initialiser le gestionnaire de session
    init_session()
    
    # V√©rifier la structure des fichiers (optionnel)
    check_file_structure()

def check_file_structure():
    """CORRIG√â : V√©rifie la structure des fichiers (version all√©g√©e)"""
    
    required_files = [
        'session_manager.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        st.error("‚ùå Fichiers critiques manquants :")
        for file_path in missing_files:
            st.write(f"‚Ä¢ {file_path}")
        st.stop()

# CORRECTION : Fonction pour afficher la version et les informations syst√®me (version simplifi√©e)
def display_system_info():
    """Affiche les informations syst√®me (version simplifi√©e pour la production)"""
    
    # VERSION SIMPLIFI√âE - moins de d√©tails sensibles
    if st.sidebar.checkbox("üîß Infos App"):
        with st.sidebar.expander("üíª Informations"):
            st.write(f"**Version :** 2.1.0")
            st.write(f"**Page :** {SessionManager.get_current_page()}")
            st.write(f"**Analyse :** {'Oui' if has_analysis() else 'Non'}")
            st.write(f"**Streamlit :** {st.__version__}")

# Point d'entr√©e principal de l'application
if __name__ == "__main__":
    try:
        # Initialiser l'application
        initialize_application()
        
        # CORRECTION : Afficher les informations syst√®me en mode debug (version simplifi√©e)
        display_system_info()
        
        # Ex√©cuter l'application principale
        main()
        
    except KeyboardInterrupt:
        st.info("‚èπÔ∏è Application interrompue par l'utilisateur")
        
    except Exception as e:
        # Gestion globale des erreurs
        handle_application_error(e, "D√©marrage")
        
        # Afficher un message de r√©cup√©ration
        st.markdown("""
        ### üÜò Erreur Critique
        
        Une erreur inattendue s'est produite lors du d√©marrage de l'application.
        
        **Solutions :**
        1. Actualisez la page (F5)
        2. V√©rifiez que tous les fichiers sont pr√©sents
        3. Contactez le support technique
        
        **Support :** contact@kaizen-corporation.com
        """)
    
    finally:
        # Code de nettoyage si n√©cessaire
        pass