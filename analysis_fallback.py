"""
Page d'analyse de fallback - Version simple et robuste
Compatible avec le SessionManager et sans d√©pendances externes
"""

import streamlit as st
from datetime import datetime

def show_fallback_analysis_page():
    """Affiche une page d'analyse simple et fonctionnelle"""
    
    # Import du gestionnaire de session
    try:
        from session_manager import SessionManager
    except ImportError:
        st.error("‚ùå SessionManager non disponible")
        return
    
    # V√©rifier qu'une analyse existe
    if not SessionManager.has_analysis_data():
        st.error("‚ùå Aucune analyse disponible")
        st.info("üí° Veuillez d'abord importer des donn√©es via la page de saisie.")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìä Saisir des Donn√©es", type="primary", use_container_width=True):
                SessionManager.set_current_page('unified_input')
                st.rerun()
        with col2:
            if st.button("üè† Retour Accueil", type="secondary", use_container_width=True):
                SessionManager.set_current_page('home')
                st.rerun()
        return
    
    # R√©cup√©rer les donn√©es d'analyse
    analysis_data = SessionManager.get_analysis_data()
    if not analysis_data:
        st.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es d'analyse")
        return
    
    data = analysis_data.get('data', {})
    ratios = analysis_data.get('ratios', {})
    scores = analysis_data.get('scores', {})
    metadata = analysis_data.get('metadata', {})
    
    # Titre et informations g√©n√©rales
    st.title("üìä Analyse Financi√®re Compl√®te")
    
    # Informations sur l'analyse
    col1, col2, col3 = st.columns(3)
    
    with col1:
        secteur = metadata.get('secteur', 'Non sp√©cifi√©')
        st.info(f"**üè≠ Secteur:** {secteur.replace('_', ' ').title()}")
    
    with col2:
        source = metadata.get('source', 'Non sp√©cifi√©')
        st.info(f"**üìÅ Source:** {source}")
    
    with col3:
        date_analyse = metadata.get('date_analyse', 'Non sp√©cifi√©e')
        st.info(f"**üìÖ Date:** {date_analyse}")
    
    st.markdown("---")
    
    # Score global avec interpr√©tation
    display_global_score(scores)
    
    st.markdown("---")
    
    # Scores d√©taill√©s par cat√©gorie
    display_detailed_scores(scores)
    
    st.markdown("---")
    
    # Donn√©es financi√®res principales
    display_financial_data(data)
    
    st.markdown("---")
    
    # Ratios financiers principaux
    display_main_ratios(ratios)
    
    st.markdown("---")
    
    # Interpr√©tation et recommandations
    display_interpretation_and_recommendations(scores, ratios, data)
    
    st.markdown("---")
    
    # Actions disponibles
    display_analysis_actions()

def display_global_score(scores):
    """Affiche le score global avec interpr√©tation"""
    
    st.subheader("üéØ Score Global BCEAO")
    
    score_global = scores.get('global', 0)
    
    # D√©terminer la couleur et l'interpr√©tation
    if score_global >= 85:
        color = "green"
        interpretation = "Excellence financi√®re"
        recommendation = "Situation exceptionnelle √† maintenir"
    elif score_global >= 70:
        color = "lightgreen"
        interpretation = "Tr√®s bonne situation"
        recommendation = "Performance solide avec quelques optimisations possibles"
    elif score_global >= 55:
        color = "orange"
        interpretation = "Bonne situation"
        recommendation = "Situation satisfaisante n√©cessitant une surveillance"
    elif score_global >= 40:
        color = "orange"
        interpretation = "Situation moyenne"
        recommendation = "Actions correctives recommand√©es"
    elif score_global >= 25:
        color = "red"
        interpretation = "Situation faible"
        recommendation = "Mesures d'am√©lioration urgentes requises"
    else:
        color = "darkred"
        interpretation = "Situation critique"
        recommendation = "Restructuration financi√®re n√©cessaire"
    
    # Affichage du score
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown(f"""
        <div style="text-align: center; padding: 30px; border-radius: 15px; background-color: {color}20; border: 3px solid {color};">
            <h1 style="color: {color}; margin: 0; font-size: 4em;">{score_global}/100</h1>
            <h3 style="color: {color}; margin: 10px 0;">{interpretation}</h3>
            <p style="color: {color}; margin: 0; font-weight: bold;">{recommendation}</p>
        </div>
        """, unsafe_allow_html=True)

def display_detailed_scores(scores):
    """Affiche les scores d√©taill√©s par cat√©gorie"""
    
    st.subheader("üìà Scores D√©taill√©s par Cat√©gorie")
    
    # D√©finition des cat√©gories avec leurs poids maximum
    categories = [
        ("üíß Liquidit√©", scores.get('liquidite', 0), 40, "Capacit√© √† honorer les engagements √† court terme"),
        ("üèõÔ∏è Solvabilit√©", scores.get('solvabilite', 0), 40, "Solidit√© de la structure financi√®re"),
        ("üìà Rentabilit√©", scores.get('rentabilite', 0), 30, "Performance √©conomique et profitabilit√©"),
        ("‚ö° Activit√©", scores.get('activite', 0), 15, "Efficacit√© dans l'utilisation des actifs"),
        ("üîß Gestion", scores.get('gestion', 0), 15, "Qualit√© de la gestion op√©rationnelle")
    ]
    
    for emoji_label, score, max_score, description in categories:
        col1, col2, col3 = st.columns([2, 1, 3])
        
        with col1:
            st.markdown(f"**{emoji_label}**")
            st.caption(description)
        
        with col2:
            percentage = (score / max_score) * 100
            st.metric("Score", f"{score}/{max_score}", f"{percentage:.0f}%")
        
        with col3:
            # Barre de progression visuelle
            progress_html = f"""
            <div style="background-color: #f0f0f0; border-radius: 10px; padding: 5px;">
                <div style="background-color: {'green' if percentage >= 75 else 'orange' if percentage >= 50 else 'red'}; 
                            width: {percentage}%; height: 20px; border-radius: 5px; transition: width 0.3s;">
                </div>
            </div>
            <p style="text-align: center; margin: 5px 0; font-size: 12px;">{percentage:.0f}% de performance</p>
            """
            st.markdown(progress_html, unsafe_allow_html=True)

def display_financial_data(data):
    """Affiche les principales donn√©es financi√®res"""
    
    st.subheader("üí∞ Donn√©es Financi√®res Principales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä Bilan")
        
        # Principales masses du bilan
        bilan_data = [
            ("Total Actif", data.get('total_actif', 0)),
            ("Immobilisations", data.get('immobilisations_nettes', 0)),
            ("Actif Circulant", data.get('total_actif_circulant', 0)),
            ("Tr√©sorerie", data.get('tresorerie', 0)),
            ("Capitaux Propres", data.get('capitaux_propres', 0)),
            ("Dettes Financi√®res", data.get('dettes_financieres', 0)),
            ("Dettes Court Terme", data.get('dettes_court_terme', 0))
        ]
        
        for label, value in bilan_data:
            st.metric(label, f"{value:,.0f} FCFA".replace(',', ' '))
    
    with col2:
        st.markdown("#### üìà Compte de R√©sultat")
        
        # Principales donn√©es du CR
        cr_data = [
            ("Chiffre d'Affaires", data.get('chiffre_affaires', 0)),
            ("Valeur Ajout√©e", data.get('valeur_ajoutee', 0)),
            ("Exc√©dent Brut d'Exploitation", data.get('excedent_brut', 0)),
            ("R√©sultat d'Exploitation", data.get('resultat_exploitation', 0)),
            ("R√©sultat Financier", data.get('resultat_financier', 0)),
            ("R√©sultat Net", data.get('resultat_net', 0))
        ]
        
        for label, value in cr_data:
            # Coloration selon positif/n√©gatif
            if value >= 0:
                st.metric(label, f"{value:,.0f} FCFA".replace(',', ' '))
            else:
                st.metric(label, f"{value:,.0f} FCFA".replace(',', ' '), delta=f"N√©gatif")

def display_main_ratios(ratios):
    """Affiche les principaux ratios financiers"""
    
    st.subheader("üìä Ratios Financiers Principaux")
    
    # Organisation en tabs pour une meilleure lisibilit√©
    tab1, tab2, tab3, tab4 = st.tabs(["üíß Liquidit√©", "üèõÔ∏è Solvabilit√©", "üìà Rentabilit√©", "‚ö° Activit√©"])
    
    with tab1:
        st.markdown("#### Ratios de Liquidit√©")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            liquidite_generale = ratios.get('ratio_liquidite_generale', 0)
            interpretation = get_ratio_interpretation(liquidite_generale, 1.5, True)
            st.metric("Liquidit√© G√©n√©rale", f"{liquidite_generale:.2f}", interpretation)
            st.caption("Norme : > 1.5")
        
        with col2:
            liquidite_immediate = ratios.get('ratio_liquidite_immediate', 0)
            interpretation = get_ratio_interpretation(liquidite_immediate, 1.0, True)
            st.metric("Liquidit√© Imm√©diate", f"{liquidite_immediate:.2f}", interpretation)
            st.caption("Norme : > 1.0")
        
        with col3:
            bfr_jours = ratios.get('bfr_jours_ca', 0)
            interpretation = get_ratio_interpretation(bfr_jours, 60, False)
            st.metric("BFR en jours", f"{bfr_jours:.0f} jours", interpretation)
            st.caption("Norme : < 60 jours")
    
    with tab2:
        st.markdown("#### Ratios de Solvabilit√©")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            autonomie = ratios.get('ratio_autonomie_financiere', 0)
            interpretation = get_ratio_interpretation(autonomie, 30, True)
            st.metric("Autonomie Financi√®re", f"{autonomie:.1f}%", interpretation)
            st.caption("Norme : > 30%")
        
        with col2:
            endettement = ratios.get('ratio_endettement', 0)
            interpretation = get_ratio_interpretation(endettement, 65, False)
            st.metric("Endettement Global", f"{endettement:.1f}%", interpretation)
            st.caption("Norme : < 65%")
        
        with col3:
            capacite_remb = ratios.get('capacite_remboursement', 0)
            interpretation = get_ratio_interpretation(capacite_remb, 5, False)
            st.metric("Capacit√© Remboursement", f"{capacite_remb:.1f} ans", interpretation)
            st.caption("Norme : < 5 ans")
    
    with tab3:
        st.markdown("#### Ratios de Rentabilit√©")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            roe = ratios.get('roe', 0)
            interpretation = get_ratio_interpretation(roe, 10, True)
            st.metric("ROE", f"{roe:.1f}%", interpretation)
            st.caption("Norme : > 10%")
        
        with col2:
            roa = ratios.get('roa', 0)
            interpretation = get_ratio_interpretation(roa, 2, True)
            st.metric("ROA", f"{roa:.1f}%", interpretation)
            st.caption("Norme : > 2%")
        
        with col3:
            marge_nette = ratios.get('marge_nette', 0)
            interpretation = get_ratio_interpretation(marge_nette, 5, True)
            st.metric("Marge Nette", f"{marge_nette:.1f}%", interpretation)
            st.caption("Norme : > 5%")
    
    with tab4:
        st.markdown("#### Ratios d'Activit√©")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            rotation_actif = ratios.get('rotation_actif', 0)
            interpretation = get_ratio_interpretation(rotation_actif, 1.5, True)
            st.metric("Rotation Actif", f"{rotation_actif:.2f}", interpretation)
            st.caption("Norme : > 1.5")
        
        with col2:
            rotation_stocks = ratios.get('rotation_stocks', 0)
            interpretation = get_ratio_interpretation(rotation_stocks, 6, True)
            st.metric("Rotation Stocks", f"{rotation_stocks:.1f}", interpretation)
            st.caption("Norme : > 6")
        
        with col3:
            delai_recouvrement = ratios.get('delai_recouvrement_clients', 0)
            interpretation = get_ratio_interpretation(delai_recouvrement, 45, False)
            st.metric("D√©lai Recouvrement", f"{delai_recouvrement:.0f} jours", interpretation)
            st.caption("Norme : < 45 jours")

def get_ratio_interpretation(value, norme, higher_is_better):
    """Retourne l'interpr√©tation d'un ratio"""
    
    if higher_is_better:
        if value >= norme * 1.2:
            return "Excellent"
        elif value >= norme:
            return "Bon"
        elif value >= norme * 0.8:
            return "Acceptable"
        else:
            return "Faible"
    else:
        if value <= norme * 0.8:
            return "Excellent"
        elif value <= norme:
            return "Bon"
        elif value <= norme * 1.2:
            return "Acceptable"
        else:
            return "Faible"

def display_interpretation_and_recommendations(scores, ratios, data):
    """Affiche l'interpr√©tation et les recommandations"""
    
    st.subheader("üéØ Interpr√©tation et Recommandations")
    
    score_global = scores.get('global', 0)
    
    # Points forts
    points_forts = []
    if scores.get('liquidite', 0) >= 30:
        points_forts.append("‚úÖ Excellente liquidit√©")
    if scores.get('solvabilite', 0) >= 30:
        points_forts.append("‚úÖ Structure financi√®re solide")
    if scores.get('rentabilite', 0) >= 20:
        points_forts.append("‚úÖ Rentabilit√© satisfaisante")
    if ratios.get('tresorerie_nette', 0) > 0:
        points_forts.append("‚úÖ Tr√©sorerie nette positive")
    
    # Points faibles
    points_faibles = []
    if scores.get('liquidite', 0) < 20:
        points_faibles.append("‚ùå Liquidit√© insuffisante")
    if scores.get('solvabilite', 0) < 20:
        points_faibles.append("‚ùå Structure financi√®re fragile")
    if scores.get('rentabilite', 0) < 15:
        points_faibles.append("‚ùå Rentabilit√© faible")
    if ratios.get('ratio_endettement', 0) > 80:
        points_faibles.append("‚ùå Endettement excessif")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üí™ Points Forts")
        if points_forts:
            for point in points_forts:
                st.markdown(f"‚Ä¢ {point}")
        else:
            st.info("Aucun point fort majeur identifi√©")
    
    with col2:
        st.markdown("#### ‚ö†Ô∏è Points √† Am√©liorer")
        if points_faibles:
            for point in points_faibles:
                st.markdown(f"‚Ä¢ {point}")
        else:
            st.success("Aucun point faible majeur identifi√©")
    
    # Recommandations g√©n√©rales
    st.markdown("#### üí° Recommandations Prioritaires")
    
    if score_global >= 70:
        st.success("""
        **Maintenir la performance actuelle :**
        ‚Ä¢ Continuer les bonnes pratiques de gestion
        ‚Ä¢ Surveiller l'√©volution des ratios cl√©s
        ‚Ä¢ Pr√©voir les investissements futurs
        """)
    elif score_global >= 40:
        st.warning("""
        **Am√©liorer les points faibles identifi√©s :**
        ‚Ä¢ Renforcer la liquidit√© si n√©cessaire
        ‚Ä¢ Optimiser la structure financi√®re
        ‚Ä¢ Am√©liorer l'efficacit√© op√©rationnelle
        """)
    else:
        st.error("""
        **Actions correctives urgentes :**
        ‚Ä¢ Revoir la strat√©gie financi√®re
        ‚Ä¢ N√©gocier avec les cr√©anciers
        ‚Ä¢ Am√©liorer la tr√©sorerie rapidement
        ‚Ä¢ Consid√©rer un apport en capital
        """)

def display_analysis_actions():
    """Affiche les actions disponibles"""
    
    st.subheader("üöÄ Actions Disponibles")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üè† Retour Accueil", type="secondary", use_container_width=True):
            SessionManager.set_current_page('home')
            st.rerun()
    
    with col2:
        if st.button("üìã G√©n√©rer Rapport", type="primary", use_container_width=True):
            SessionManager.set_current_page('reports')
            st.rerun()
    
    with col3:
        if st.button("üìä Nouvelle Saisie", type="secondary", use_container_width=True):
            SessionManager.set_current_page('unified_input')
            st.rerun()
    
    with col4:
        if st.button("üîÑ Nouvelle Analyse", type="secondary", use_container_width=True):
            # Confirmation de reset
            if st.session_state.get('confirm_analysis_reset', False):
                try:
                    from session_manager import reset_app
                    reset_app()
                    st.success("üîÑ Application r√©initialis√©e!")
                    st.rerun()
                except:
                    st.error("Erreur lors de la r√©initialisation")
            else:
                st.session_state['confirm_analysis_reset'] = True
                st.warning("‚ö†Ô∏è Cliquez √† nouveau pour confirmer le reset")

# Point d'entr√©e si le fichier est ex√©cut√© directement
if __name__ == "__main__":
    show_fallback_analysis_page()
