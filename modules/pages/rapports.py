"""
Page de g√©n√©ration de rapports pour OptimusCredit
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import json

try:
    from session_manager import SessionManager
except ImportError:
    st.error("‚ùå Impossible d'importer session_manager")
    st.stop()

def show_rapports_page():
    """Affiche la page de g√©n√©ration de rapports"""
    
    st.title("üìã G√©n√©ration de Rapports")
    st.markdown("---")
    
    # V√©rifier si des donn√©es d'analyse sont disponibles
    if not SessionManager.has_analysis_data():
        st.warning("‚ö†Ô∏è Aucune analyse disponible. Veuillez d'abord importer et analyser un fichier Excel.")
        
        if st.button("üì§ Aller √† l'Import Excel"):
            SessionManager.set_current_page("excel_import")
            st.rerun()
        
        return
    
    # R√©cup√©rer les donn√©es d'analyse
    analysis_data = SessionManager.get_analysis_data()
    data = analysis_data['data']
    ratios = analysis_data['ratios']
    scores = analysis_data['scores']
    metadata = analysis_data['metadata']
    
    st.success(f"‚úÖ Analyse disponible - Score: {scores.get('global', 0)}/100")
    
    # Types de rapports disponibles
    st.header("üìä Types de Rapports Disponibles")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("üìÑ Synth√®se Ex√©cutive")
        st.write("R√©sum√© en 1-2 pages avec les points cl√©s")
        if st.button("üì• T√©l√©charger Synth√®se", use_container_width=True):
            generate_executive_summary(data, ratios, scores, metadata)
    
    with col2:
        st.subheader("üìë Rapport D√©taill√©")
        st.write("Analyse compl√®te avec tous les ratios")
        if st.button("üì• T√©l√©charger Rapport Complet", use_container_width=True):
            generate_detailed_report(data, ratios, scores, metadata)
    
    with col3:
        st.subheader("üíæ Donn√©es Brutes")
        st.write("Export JSON avec toutes les donn√©es")
        if st.button("üì• T√©l√©charger JSON", use_container_width=True):
            generate_json_export(data, ratios, scores, metadata)
    
    # Aper√ßu des donn√©es
    st.markdown("---")
    st.header("üëÅÔ∏è Aper√ßu des Donn√©es")
    
    tab1, tab2, tab3 = st.tabs(["üìä Scores", "üìà Ratios Cl√©s", "üí∞ Donn√©es Financi√®res"])
    
    with tab1:
        show_scores_preview(scores)
    
    with tab2:
        show_ratios_preview(ratios)
    
    with tab3:
        show_financial_preview(data)

def generate_executive_summary(data, ratios, scores, metadata):
    """G√©n√®re et t√©l√©charge la synth√®se ex√©cutive"""
    
    summary = f"""
SYNTH√àSE EX√âCUTIVE - ANALYSE FINANCI√àRE
======================================

Date d'analyse: {metadata.get('date_analyse', datetime.now().strftime('%d/%m/%Y'))}
Secteur: {metadata.get('secteur', 'N/A').replace('_', ' ').title()}
Fichier analys√©: {metadata.get('fichier_nom', 'N/A')}

R√âSULTAT GLOBAL
===============
Score BCEAO: {scores.get('global', 0)}/100
√âvaluation: {get_interpretation(scores.get('global', 0))}

INDICATEURS CL√âS
================
‚Ä¢ Chiffre d'Affaires: {data.get('chiffre_affaires', 0):,.0f} FCFA
‚Ä¢ R√©sultat Net: {data.get('resultat_net', 0):,.0f} FCFA
‚Ä¢ Total Actif: {data.get('total_actif', 0):,.0f} FCFA
‚Ä¢ Capitaux Propres: {data.get('capitaux_propres', 0):,.0f} FCFA

PERFORMANCE PAR CAT√âGORIE
=========================
‚Ä¢ Liquidit√©: {scores.get('liquidite', 0)}/40 ({scores.get('liquidite', 0)/40*100:.0f}%)
‚Ä¢ Solvabilit√©: {scores.get('solvabilite', 0)}/40 ({scores.get('solvabilite', 0)/40*100:.0f}%)
‚Ä¢ Rentabilit√©: {scores.get('rentabilite', 0)}/30 ({scores.get('rentabilite', 0)/30*100:.0f}%)
‚Ä¢ Activit√©: {scores.get('activite', 0)}/15 ({scores.get('activite', 0)/15*100:.0f}%)
‚Ä¢ Gestion: {scores.get('gestion', 0)}/15 ({scores.get('gestion', 0)/15*100:.0f}%)

RATIOS FINANCIERS CL√âS
======================
‚Ä¢ Liquidit√© G√©n√©rale: {ratios.get('ratio_liquidite_generale', 'N/A')}
‚Ä¢ Autonomie Financi√®re: {ratios.get('ratio_autonomie_financiere', 'N/A')}%
‚Ä¢ ROE: {ratios.get('roe', 'N/A')}%
‚Ä¢ Marge Nette: {ratios.get('marge_nette', 'N/A')}%

RECOMMANDATIONS PRIORITAIRES
============================
{get_priority_recommendations(scores, ratios)}

CONCLUSION
==========
{get_conclusion(scores)}

---
Rapport g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
OptimusCredit - D√©velopp√© par Kaizen Corporation
"""
    
    st.download_button(
        label="üìÑ T√©l√©charger Synth√®se Ex√©cutive",
        data=summary,
        file_name=f"synthese_executive_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
        mime="text/plain"
    )

def generate_detailed_report(data, ratios, scores, metadata):
    """G√©n√®re et t√©l√©charge le rapport d√©taill√©"""
    
    # Version simplifi√©e pour √©viter les erreurs
    report = f"""
RAPPORT D'ANALYSE FINANCI√àRE D√âTAILL√â
=====================================

Date: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
Secteur: {metadata.get('secteur', 'N/A').replace('_', ' ').title()}

SCORE GLOBAL: {scores.get('global', 0)}/100

DONN√âES FINANCI√àRES COMPL√àTES
=============================
{json.dumps(data, indent=2, ensure_ascii=False)}

RATIOS FINANCIERS COMPLETS
==========================
{json.dumps(ratios, indent=2, ensure_ascii=False)}

SCORES D√âTAILL√âS
================
{json.dumps(scores, indent=2, ensure_ascii=False)}

---
G√©n√©r√© par OptimusCredit - Kaizen Corporation
"""
    
    st.download_button(
        label="üìë T√©l√©charger Rapport D√©taill√©",
        data=report,
        file_name=f"rapport_detaille_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
        mime="text/plain"
    )

def generate_json_export(data, ratios, scores, metadata):
    """G√©n√®re et t√©l√©charge l'export JSON"""
    
    export_data = {
        'metadata': metadata,
        'date_export': datetime.now().isoformat(),
        'data': data,
        'ratios': ratios,
        'scores': scores,
        'version': '2.1.0'
    }
    
    json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
    
    st.download_button(
        label="üíæ T√©l√©charger Donn√©es JSON",
        data=json_data,
        file_name=f"optimuscredit_data_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
        mime="application/json"
    )

def show_scores_preview(scores):
    """Affiche un aper√ßu des scores"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Score Global", f"{scores.get('global', 0)}/100")
        st.metric("Liquidit√©", f"{scores.get('liquidite', 0)}/40")
        st.metric("Solvabilit√©", f"{scores.get('solvabilite', 0)}/40")
    
    with col2:
        st.metric("Rentabilit√©", f"{scores.get('rentabilite', 0)}/30")
        st.metric("Activit√©", f"{scores.get('activite', 0)}/15")
        st.metric("Gestion", f"{scores.get('gestion', 0)}/15")

def show_ratios_preview(ratios):
    """Affiche un aper√ßu des ratios cl√©s"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Liquidit√© G√©n√©rale", f"{ratios.get('ratio_liquidite_generale', 0):.2f}")
        st.metric("Autonomie Financi√®re", f"{ratios.get('ratio_autonomie_financiere', 0):.1f}%")
    
    with col2:
        st.metric("ROE", f"{ratios.get('roe', 0):.1f}%")
        st.metric("Marge Nette", f"{ratios.get('marge_nette', 0):.1f}%")

def show_financial_preview(data):
    """Affiche un aper√ßu des donn√©es financi√®res"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Chiffre d'Affaires", f"{data.get('chiffre_affaires', 0):,.0f} FCFA")
        st.metric("Total Actif", f"{data.get('total_actif', 0):,.0f} FCFA")
    
    with col2:
        st.metric("R√©sultat Net", f"{data.get('resultat_net', 0):,.0f} FCFA")
        st.metric("Capitaux Propres", f"{data.get('capitaux_propres', 0):,.0f} FCFA")

def get_interpretation(score):
    """Retourne l'interpr√©tation du score"""
    if score >= 85:
        return "Excellence financi√®re"
    elif score >= 70:
        return "Tr√®s bonne situation"
    elif score >= 55:
        return "Bonne situation"
    elif score >= 40:
        return "Situation acceptable"
    elif score >= 25:
        return "Situation fragile"
    else:
        return "Situation critique"

def get_priority_recommendations(scores, ratios):
    """Retourne les recommandations prioritaires"""
    recommendations = []
    
    if scores.get('liquidite', 0) < 25:
        recommendations.append("- URGENT: Am√©liorer la liquidit√©")
    if scores.get('solvabilite', 0) < 25:
        recommendations.append("- IMPORTANT: Renforcer la solvabilit√©")
    if scores.get('rentabilite', 0) < 15:
        recommendations.append("- Optimiser la rentabilit√©")
    
    if not recommendations:
        recommendations.append("- Maintenir les bonnes performances actuelles")
    
    return "\n".join(recommendations)

def get_conclusion(scores):
    """Retourne la conclusion de l'analyse"""
    score_global = scores.get('global', 0)
    
    if score_global >= 70:
        return "L'entreprise pr√©sente une situation financi√®re solide avec de bonnes perspectives."
    elif score_global >= 50:
        return "L'entreprise a une situation correcte mais des am√©liorations sont possibles."
    else:
        return "L'entreprise n√©cessite des actions correctives pour am√©liorer sa situation financi√®re."